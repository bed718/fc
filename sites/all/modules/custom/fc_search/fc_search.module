<?php
// $Id$
/**
 * @file
 * Fresh Charities Search
 * Contains search hooks/modifications for Fresh Charities site
 */

/**
 * Implementation of hook_apachesolr_index_documents_alter
 * Add fields as needed to documents being added to the
 *
 * @param array $documents
 * @param StdClass $entity
 * @param String $entity_type
 * @param String $env_id
 */
function fc_search_apachesolr_index_documents_alter(array &$documents, $entity, $entity_type, $env_id = '') {
  // Add fields to users
  if ($entity_type == 'user') {
   // $documents[0]->addField('ss_craigtest', 'CRAIG TEST VALUE'. $entity->field_user_description['und'][0]['value']);

   $profile = profile2_load_by_user($entity->uid);

   if($profile['charity']){
   	$documents[0]->addField('ss_profile_type', 'charity');
   	$documents[0]->addField('ss_profile_name', $profile['charity']->field_charity_name['und'][0]['value']);
   	$documents[0]->addField('locs_coordinates', floatval($profile['charity']->field_charity_location['und'][0]['latitude']) . ',' . floatval($profile['charity']->field_charity_location['und'][0]['longitude']));
   }elseif($profile['user']){
   	$documents[0]->addField('ss_profile_type', 'user');
   	$documents[0]->addField('ss_profile_name', $profile['user']->field_user_name['und'][0]['value']);
   	$documents[0]->addField('ss_user_zip', $profile['user']->field_uesr_zip['und'][0]['postal_code']);
   	$documents[0]->addField('locs_coordinates', floatval($profile['user']->field_uesr_zip['und'][0]['latitude']) . ',' . floatval($profile['user']->field_uesr_zip['und'][0]['longitude']));
   }

  }
  elseif ($entity_type == 'node') {
    switch ($entity->type) {
      case 'event':
			//$documents[0]->addField('is_event_latitude', $entity->field_event_location['und'][0]['latitude']);
			//$documents[0]->addField('is_event_longitude', $entity->field_event_location['und'][0]['longitude']);
      break;
      case 'node-type-2':
      break;
    }
  }
}// end function fc_search_apachesolr_index_documents_alter(array &$documents, $entity, $entity_type, $env_id = '')

/**
 * Returns HTML for an active facet item.
 * Correctly uses current path for facets so they return the user to the start search page
 * Based on facetapi.theme.inc theme_facetapi_link_active
 *
 * @param $variables
 *   An associative array containing the keys 'text', 'path', and 'options'. See
 *   the l() function for information about these variables.
 *
 * @ingroup themeable
 */
function fc_classic_facetapi_link_active($variables) {

  // Sanitizes the link text if necessary.
  $sanitize = empty($variables['options']['html']);
  $link_text = ($sanitize) ? check_plain($variables['text']) : $variables['text'];

  // Theme function variables fro accessible markup.
  // @see http://drupal.org/node/1316580
  $accessible_vars = array(
      'text' => $variables['text'],
      'active' => TRUE,
  );

  // Builds link, passes through t() which gives us the ability to change the
  // position of the widget on a per-language basis.
  $replacements = array(
      '!facetapi_deactivate_widget' => theme('facetapi_deactivate_widget'),
      '!facetapi_accessible_markup' => theme('facetapi_accessible_markup', $accessible_vars),
  );
  $variables['text'] = t('!facetapi_deactivate_widget !facetapi_accessible_markup', $replacements);
  $variables['options']['html'] = TRUE;

  // correctly use the current search page's path
  $variables['path'] = $_GET['q'];
  return theme_link($variables) . $link_text;
}

/**
 * Returns HTML for an inactive facet item
 * Correctly uses current path for facets so they return the user to the start search page
 * Based on facetapi.theme.inc theme_facetapi_link_inactive
 *
 * @param $variables
 *   An associative array containing the keys 'text', 'path', 'options', and
 *   'count'. See the l() and theme_facetapi_count() functions for information
 *   about these variables.
 *
 * @ingroup themeable
 */
function fc_classic_facetapi_link_inactive($variables) {
  // Builds accessible markup.
  // @see http://drupal.org/node/1316580
  $accessible_vars = array(
      'text' => $variables['text'],
      'active' => FALSE,
  );
  $accessible_markup = theme('facetapi_accessible_markup', $accessible_vars);

  // Sanitizes the link text if necessary.
  $sanitize = empty($variables['options']['html']);
  $variables['text'] = ($sanitize) ? check_plain($variables['text']) : $variables['text'];

  // Adds count to link if one was passed.
  if (isset($variables['count'])) {
    $variables['text'] .= ' ' . theme('facetapi_count', $variables);
  }

  // Resets link text, sets to options to HTML since we already sanitized the
  // link text and are providing additional markup for accessibility.
  $variables['text'] .= $accessible_markup;
  $variables['options']['html'] = TRUE;

  // correctly use the current page's path
  $variables['path'] = $_GET['q'];
  return '<span>+</span> '. theme_link($variables);
}

/**
 * Returns HTML for the deactivation widget.
 *
 * @param $variables
 *   An associative array containing:
 *   - text: The text of the facet link.
 *
 * @ingroup themable
 */
function fc_classic_facetapi_deactivate_widget($variables) {
  return '<span>-</span>';
}

/**
 * Returns HTML for the inactive facet item's count.
 *
 * @param $variables
 *   An associative array containing:
 *   - count: The item's facet count.
 *
 * @ingroup themeable
 */
function fc_classic_facetapi_count($variables) {
  return '<span class=\'filter-count\'>' . (int) $variables['count'] . '<span>';
}